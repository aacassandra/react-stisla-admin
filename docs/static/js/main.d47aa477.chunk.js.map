{"version":3,"sources":["history.js","app/config/routes/index.js","serviceWorker.js","index.js"],"names":["history","browserHistory","require","createBrowserHistory","Home","params","ListView","to","DetailView","match","name","NoMatch","Router","path","exact","component","React","Component","Boolean","window","location","hostname","jQuery","$","JSZip","Swal","moment","ReactDOM","render","forceRefresh","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAIeA,GAFCC,EAFOC,EAAQ,GAAWC,wB,wDCoC1C,SAASC,EAAKC,GACZ,OAAO,4CAGT,SAASC,EAASD,GAChB,OACE,6BACE,2CACA,4BACE,kBAAC,IAAD,CAAME,GAAG,gBAAT,UACA,6BACA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,YAMR,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACpB,OAAO,2CAAiBA,EAAMJ,OAAOK,MAGvC,SAASC,EAAQN,GACf,OAAO,4DAGMO,M,iLArDX,OACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAML,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAIN,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,KAAK,SAASC,OAAK,EAACC,UAAWT,IACtC,kBAAC,IAAD,CAAOO,KAAK,cAAcE,UAAWP,IACrC,kBAAC,IAAD,CAAOO,UAAWJ,W,GAtBTK,IAAMC,W,kBCMPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCINU,OAAOG,OAASA,EAChBH,OAAOI,EAAID,EAEXpB,EAAQ,IACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KAERiB,OAAOK,MAAQtB,EAAQ,KACvBA,EAAQ,IACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,IACRA,EAAQ,KACRA,EAAQ,IACRA,EAAQ,KAERiB,OAAOM,KAAOvB,EAAQ,KACtBiB,OAAOO,OAASxB,EAAQ,IAGxBA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KAERyB,IAASC,OACP,kBAAC,IAAD,CAAe5B,QAASA,EAAS6B,cAAY,GAC3C,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2DpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d47aa477.chunk.js","sourcesContent":["const browserHistory = require('history').createBrowserHistory;\n\nconst history = browserHistory();\n\nexport default history;\n","import React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\n// import { Login } from '../../container/pages';\n// import Layout from '../../container/layout/admin';\n// import { Guard } from '../guard';\n\nclass Router extends React.Component {\n  render() {\n    return (\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n        <main>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/users\" exact component={ListView} />\n            <Route path=\"/user/:name\" component={DetailView} />\n            <Route component={NoMatch} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nfunction Home(params) {\n  return <h2>Halaman Home</h2>;\n}\n\nfunction ListView(params) {\n  return (\n    <div>\n      <h2>Semua Users</h2>\n      <ul>\n        <Link to=\"/user/hilman\">Hilman</Link>\n        <br />\n        <Link to=\"/user/robert\">Robert</Link>\n      </ul>\n    </div>\n  );\n}\n\nfunction DetailView({ match }) {\n  return <h2>Ini halaman {match.params.name}</h2>;\n}\n\nfunction NoMatch(params) {\n  return <h2>404, Halaman tidak ditemukan</h2>;\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '@fortawesome/fontawesome-free/css/all.css';\nimport '@mdi/font/css/materialdesignicons.min.css';\n// Template JS File\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as jQuery from 'jquery';\nimport 'jqvmap/dist/jqvmap.min.css';\nimport 'owl.carousel/dist/assets/owl.carousel.min.css';\nimport 'owl.carousel/dist/assets/owl.theme.default.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// eslint-disable-next-line no-undef\nimport { BrowserRouter } from 'react-router-dom';\nimport history from './history';\nimport 'summernote/dist/summernote-bs4.css';\nimport App from './app/config/routes';\nimport './assets/css/components.css';\n// Template\nimport './assets/css/style.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.jQuery = jQuery;\nwindow.$ = jQuery;\n\nrequire('inputmask/dist/inputmask/jquery.inputmask');\nrequire('inputmask/dist/inputmask/inputmask.date.extensions');\nrequire('inputmask/dist/inputmask/inputmask.extensions');\nrequire('popper.js/dist/popper.min');\nrequire('bootstrap/dist/js/bootstrap.min');\nrequire('jquery.nicescroll/dist/jquery.nicescroll.min');\nrequire('select2/dist/js/select2.full');\nrequire('bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min');\nrequire('bootstrap-select/dist/js/bootstrap-select');\nrequire('bootstrap-tagsinput/dist/bootstrap-tagsinput');\nrequire('bootstrap-daterangepicker/daterangepicker');\nrequire('bootstrap-timepicker/js/bootstrap-timepicker.min');\nrequire('bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min');\nrequire('bootstrap-datepicker/dist/js/bootstrap-datepicker.min');\n\nwindow.JSZip = require('jszip');\nrequire('datatables.net-bs4');\nrequire('datatables.net-buttons-bs4');\nrequire('datatables.net-buttons/js/buttons.html5');\nrequire('datatables.net-buttons/js/buttons.print');\nrequire('datatables.net-buttons/js/buttons.colVis');\nrequire('pdfmake/build/pdfmake.min');\nrequire('pdfmake/build/vfs_fonts');\nrequire('datatables.net-responsive');\nrequire('datatables.net-responsive-bs4');\nrequire('datatables.net-select');\nrequire('datatables.net-select-bs4');\n\nwindow.Swal = require('sweetalert2');\nwindow.moment = require('moment');\n\n// JS Libraies\nrequire('jquery-sparkline/jquery.sparkline.min');\nrequire('simpleweather/jquery.simpleWeather.min');\nrequire('chart.js/dist/Chart.min');\nrequire('jqvmap/dist/jquery.vmap.min');\nrequire('jqvmap/dist/maps/jquery.vmap.world');\nrequire('owl.carousel/dist/owl.carousel.min');\nrequire('summernote/dist/summernote-bs4');\nrequire('chocolat/dist/js/jquery.chocolat.min');\n\nReactDOM.render(\n  <BrowserRouter history={history} forceRefresh>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}